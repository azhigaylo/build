#!/bin/bash

# this script provides utility functions

set -e

#source $( dirname $( realpath -s ${BASH_SOURCE[0]} ))/common_defs.sh

exec_sudo_cmd()
{
    echo " ---> !!!(ROOT PERMISSIONS REQUIRED) Execute sudo cmd: '$@'"
    sudo $@
}

install_package()
{
    echo " ---> Installing packages '$@' via apt-get..."
    exec_sudo_cmd apt-get install -y $@
}

remove_directory()
{
    local readonly dir_to_clean="$1";
    if [ -d "$dir_to_clean" ] && [ -n "$dir_to_clean" ] && [ "$dir_to_clean" != "$undefined_value" ] && [ "$dir_to_clean" != "/" ]
    then
        echo " ---> Removing directory '$dir_to_clean' .."
        rm -rf "$dir_to_clean"
    fi
}

on_abort()
{
    if [ "$#" -eq 0 ]
    then
        echo "Usage: $FUNCNAME message" >&2
        exit 1
    fi

    echo >&2 "
***************************************************
*** ABORTED: $@
***************************************************
"
    trap : 0
    exit 1
}

on_startup()
{
    if [ "$#" -eq 0 ]
    then
        echo "Usage: $FUNCNAME message" >&2
        exit 1
    fi

    echo "
***********************************************
*** STARTUP: $@
***********************************************"
}

on_success()
{
    local readonly rv=$?
    if [ "$#" -eq 0 ]
    then
        echo "Usage: $FUNCNAME message" >&2
        exit 1
    fi

    if [ $rv -ne 0 ]
    then
        on_abort $@
    fi

    echo "
***********************************************
*** DONE: $@
***********************************************
"
    trap : 0
    exit $rv
}

check_if_cur_user_has_write_permissions()
{
    local directory_to_check=$1
    if [ $directory_to_check == $undefined_value ]
    then
        printf "false";
        return 0;
    fi

    if [ -w $directory_to_check ]
    then
        printf "true"
    else
        printf "false"
    fi

    return 0
}

build_make_project()
{
    if [ -z "$1" ]
    then
        echo -e " ---> \033[0;31m!!!ERROR: make working directory MUST be specified.\033[0m"
        exit 1
    fi

    local _make_project_root_path=$1
    echo " ---> Running 'make -C $_make_project_root_path $make_arg_list'.."
    make -C $_make_project_root_path $make_arg_list
    if [ $need_install == true ]
    then
        if [ $( check_if_cur_user_has_write_permissions $install_prefix_path ) = "true" ]
        then
            echo " ---> Running 'make -C $_make_project_root_path $make_arg_list install'"
            make -C $_make_project_root_path $make_arg_list install
        else
            exec_sudo_cmd make -C $_make_project_root_path $make_arg_list install
        fi

        exec_sudo_cmd ldconfig

        echo "$target_name have been successfully installed!"
    fi
}

get_local_cmake_path()
{
    readonly local _project_root_path=$( dirname $( dirname $( dirname $( realpath -s $0))))
    readonly local _project_name=$( basename $( dirname $script_root_path ))
    readonly local _local_cmake_path="$_project_root_path"/"$_project_name"_third_party/host/CMake/bin

    printf $_local_cmake_path;
}

# If no path to root cmake list specified than root source project directory will be used
build_cmake_project()
{
    if [ -z "$1" ]
    then
        echo -e " ---> \033[0;31m!!!ERROR: source directory MUST be specified.\033[0m"
        exit 1
    fi

    local _module_source_path=$1

    if [ -z "$2" ]
    then
        echo -e " ---> \033[0;31m!!!ERROR: products directory MUST be specified.\033[0m"
        exit 1
    fi

    local _module_poducts_path=$2
    local _module_install_path=$3

    cmake_arg_list+=" -DCMAKE_INSTALL_PREFIX=$_module_install_path ";

    _cmake_path=$(get_local_cmake_path)/cmake
    _cmake_cmd="$_cmake_path $cmake_arg_list $_module_source_path"
    echo " ---> Running '$_cmake_cmd $cmake_arg_list $_module_source_path'"
    cd $_module_poducts_path
    eval $_cmake_cmd > /dev/null 2>&1 || { echo -e " ---> \033[0;41m!!!ERROR: local cmake was not installed, try to prepare_cmake.sh\033[0m"; exit 1; }
    cd -

    build_make_project $_module_poducts_path
}

# version_compare <v1> <v2> function
# "=" if equal
# ">" if v1 greater than v2
# "<" if v1 less than v2
version_compare () {
    if [[ $1 == $2 ]]
    then
        printf "="
        return 0;
    fi

    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            printf ">"
            return 0;
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            printf "<"
            return 0;
        fi
    done

    printf "="
    return 0;
}

# usage generate_versioned_target_name <target_name> <major.minor.patch>
generate_versioned_target_name()
{
    if [ -z "$1" ] || [ -z "$2" ]
    then
        return -1
    fi

    local _target_name=$1
    local _target_version=$2
    local _versioned_target_name="$_target_name"_`echo $_target_version | sed 's/\./_/g'`
    printf "$_versioned_target_name";
}

# make_relative_path <absolute> <current>
make_relative_path()
{ 
    printf $( realpath --relative-to=$1 $2 )
}

# write_exported_variable <exported_var_name> <exported_var_value> <filename>
write_exported_variable()
{
    printf 'export '$1'=$'$1':'$2"\n" | eval $3
    printf 'echo " ---> '$1'=$'$1'"'"\n\n" | eval $3
}

generate_setenv_files()
{

    local _dest_path=$1

    if ! [ -z "$cmake_prefix_path_env_variable" ] ||
       ! [ -z "$pkg_config_path_env_variable" ] ||
       ! [ -z "$library_path_env_variable" ]
    then
        local _sudo_prefix=""
        if ! [ $( check_if_cur_user_has_write_permissions $install_prefix_path ) = "true" ]
            then
            _sudo_prefix="exec_sudo_cmd"
        fi

        local _setenv_file=$_dest_path/set_"$target_name"_env.sh

        if [ -f "$_setenv_file" ]
        then
            $_sudo_prefix rm -f $_setenv_file
        fi

        local _write_to_dest_file="$_sudo_prefix tee -a $_setenv_file > /dev/null"
        printf '# Auto generated file.'"\n" | eval $_write_to_dest_file
        printf '# The script is expected to be sourced'"\n\n" | eval $_write_to_dest_file

        if ! [ -z "$library_path_env_variable" ]
        then
            write_exported_variable "LD_LIBRARY_PATH" "$library_path_env_variable" "$_write_to_dest_file"
        fi

        if ! [ -z "$cmake_prefix_path_env_variable" ]
        then
            write_exported_variable "CMAKE_PREFIX_PATH" "$cmake_prefix_path_env_variable" "$_write_to_dest_file"
        fi

        if ! [ -z "$pkg_config_path_env_variable" ]
        then
            write_exported_variable "PKG_CONFIG_PATH" "$pkg_config_path_env_variable" "$_write_to_dest_file"
        fi

        $_sudo_prefix chmod +x $_setenv_file
        echo " ---> Generated for '$target_name' environment file: '$_setenv_file'."
    fi
}


